// Contract for setting up a satellite to the outer planets.
//   Author: nightingale

CONTRACT_TYPE:NEEDS[RemoteTech]
{
    name = RT_OuterSat

    sortKey = 02.01

    title = Communication satellite for outer planets
    description = We want to go really far!  Let's set up a satellite that can reach the outer planets.
    synopsis = Launch a satellite with enough range for the outer planets and point it towards one of them.  Make sure it has connectivity back to mission control.
    completedMessage = The satellite is up and transmitting, and our shake-out testing is complete!

    group = RemoteTech

    // Level 1 prestige
    prestige = Trivial

    // The satellite is launch in Kerbin orbit - so it's a Kerbin contract
    targetBody = HomeWorld()

    // Always offered by CommSat Group
    agent = Communication Satellite Group

    // Can only do this contract once
    maxCompletions = 1

    // Contract rewards
    rewardReputation = 15.0
    rewardFunds = @advanceFunds * 3.0
    advanceFunds = 85000.0 + 5000.0 * @targetBodies.Count()

    DATA
    {
        type = double

        sma = @targetBody.SemiMajorAxis()
        targetSMA = @sma * 1.55
    }

    DATA
    {
        type = List<CelestialBody>

        //targetBodies = AllBodies().Where(cb => cb.SemiMajorAxis() >= @targetSMA && cb.IsPlanet() && cb != HomeWorld())
		targetBodies = [ Kel, Hal, Naith, Hypat ]
    }

    PARAMETER
    {
        name = OuterSatI
        type = VesselParameterGroup

        define = Giga CommSat I
        disableOnStateChange = false

        PARAMETER
        {
            name = KSCConnectivity
            type = KSCConnectivity
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState

            situation = ORBITING
        }

        PARAMETER
        {
            name = OuterTarget
            type = Any

            title = Point a dish at ONE of the outer planets

            disableOnStateChange = false

            PARAMETER
            {
                name = HasAntenna
                type = HasAntenna

                antennaType = Dish
                targetBody = @target

                ITERATOR
                {
                    type = CelestialBody
                    target = @/targetBodies
                }
            }
        }
    }    

    PARAMETER
    {
        name = Duration
        type = Duration

        duration = 4d

        preWaitText = Testing time after network up
        waitingText = Performing shake-out testing
        completionText = Shake-out testing completed
    }

    REQUIREMENT
    {
        name = Coverage
        type = Any

        hideChildren = true
        title = There must be an outer planet without coverage

        REQUIREMENT
        {
            name = CelestialBodyCoverage
            type = CelestialBodyCoverage

            targetBody = @/targetBodies.ElementAt(0)

            minCoverage = 0.0
            maxCoverage = 0.2
        }

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/targetBodies.ElementAt(1)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/targetBodies.Count() > 1
            }
        }

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/targetBodies.ElementAt(2)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/targetBodies.Count() > 2
            }
        }

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/targetBodies.ElementAt(3)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/targetBodies.Count() > 3
            }
        }

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/targetBodies.ElementAt(4)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/targetBodies.Count() > 4
            }
        }

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/targetBodies.ElementAt(5)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/targetBodies.Count() > 5
            }
        }

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/targetBodies.ElementAt(6)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/targetBodies.Count() > 6
            }
        }

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/targetBodies.ElementAt(7)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/targetBodies.Count() > 7
            }
        }

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/targetBodies.ElementAt(8)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/targetBodies.Count() > 8
            }
        }

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/targetBodies.ElementAt(9)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/targetBodies.Count() > 9
            }
        }
    }

    REQUIREMENT
    {
        name = AnyGigaDish
        type = Any

        REQUIREMENT
        {
            name = PartUnlocked
            type = PartUnlocked

            part = RTGigaDish1
        }

        REQUIREMENT
        {
            name = PartUnlocked
            type = PartUnlocked

            part = RTGigaDish2
        }
    }

    REQUIREMENT
    {
        name = PartModuleTypeUnlocked
        type = PartModuleTypeUnlocked

        partModuleType = Antenna
        partModuleType = Generator
    }
}
