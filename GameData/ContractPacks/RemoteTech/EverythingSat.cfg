// Contract for setting up a crazy big satellite.
//   Author: nightingale

CONTRACT_TYPE:NEEDS[RemoteTech]
{
    name = RT_EverythingSat

    sortKey = 02.02

    title = Communication satellite for every planet
    description = We've come up with a brilliant plan.  Let's launch a satellite that has one dish for each and every planet in the system!  That way we don't have to keep bothering with launching these things.  It would be nice if you could also put it in @geostationary orbit above the KCS.  Oh, and launch a second one while you're at it - just in case the first one breaks.
    synopsis = Launch two satellites that can each connect to all planets in the system.
    completedMessage = The satellites are up and transmitting, and our shake-out testing is complete!

    group = RemoteTech

    // Level 3 prestige
    prestige = Exceptional

    // The satellite is launch in Kerbin orbit - so it's a Kerbin contract
    targetBody = HomeWorld()

    // Always offered by CommSat Group
    agent = Communication Satellite Group

    // Can only do this contract once
    maxCompletions = 1

    // Contract rewards
    rewardReputation = 10.0
    rewardFunds = @advanceFunds * 3.0
    advanceFunds = 150000.0 + 10000.0 * @allBodies.Count()

    DATA
    {
        type = bool

        isKerbin = @targetBody.Name() == "Kerbin"
    }

    DATA
    {
        type = string

        geostationary = @isKerbin ? "keostationary" : "geostationary"
    }

    DATA
    {
        type = List<CelestialBody>

        allBodies = AllBodies().Where(cb => cb != HomeWorld() && cb.IsPlanet() && cb.Parent() == "Kerbol")
    }

    DATA
    {
        type = double

        G = 6.67384 * Pow(10, -11)
        t = @targetBody.RotationalPeriod()
        pi = 3.14159265359

        keoAltitude = Pow(@G * @targetBody.Mass() * @t * @t / 4.0 / @pi / @pi, 1.0 / 3.0) - @targetBody.Radius()
    }

    PARAMETER
    {
        name = KerbolSatI
        type = VesselParameterGroup

        define = Kerbol CommSat I
        disableOnStateChange = false

        PARAMETER
        {
            name = KSCConnectivity
            type = KSCConnectivity
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState

            situation = ORBITING
        }

        PARAMETER
        {
            name = HasAntenna
            type = HasAntenna

            antennaType = Dish
            targetBody = @target

            ITERATOR
            {
                type = CelestialBody
                target = @/allBodies
            }
        }
    }

    PARAMETER
    {
        name = KerbolSatII
        type = VesselParameterGroup

        define = Kerbol CommSat II
        disableOnStateChange = false

        PARAMETER
        {
            name = KSCConnectivity
            type = KSCConnectivity
        }

        PARAMETER
        {
            name = IsNotVessel
            type = IsNotVessel

            vessel = Kerbol CommSat I
        }

        PARAMETER
        {
            name = ReachState
            type = ReachState

            situation = ORBITING
        }

        PARAMETER
        {
            name = HasAntenna
            type = HasAntenna

            antennaType = Dish
            targetBody = @target

            ITERATOR
            {
                type = CelestialBody
                target = @/allBodies
            }
        }
    }

    PARAMETER
    {
        name = Duration
        type = Duration

        duration = 7d

        preWaitText = Testing time after network up
        waitingText = Performing shake-out testing
        completionText = Shake-out testing completed
    }

    PARAMETER
    {
        name = KEO
        type = All

        title = (Optional) Put one of the satellites in @/geostationary orbit above the KSC
        optional = True

        // Parameter rewards
        rewardReputation = @/rewardReputation * 4.0
        rewardFunds = @/rewardFunds / 2.0

        PARAMETER
        {
            name = KEO_Sat
            type = VesselParameterGroup

            vessel = Kerbol CommSat I
            vessel = Kerbol CommSat II

            disableOnStateChange = false

            PARAMETER
            {
                name = ReachSpecificOrbit1
                type = ReachSpecificOrbit

                index = 0

                // The deviation window for how close we must match the given orbit.
                deviationWindow = 1.0
            }

            PARAMETER
            {
                name = VisitWaypoint1
                type = VisitWaypoint

                // Index of the waypoint in the WaypointGenerator behaviour.
                index = 0

                // 100 km tolerance
                distance = 100000.0
            }
        }

        PARAMETER
        {
            name = Duration
            type = Duration

            duration = 4h

            preWaitText = Keep a stable orbit
            waitingText = Verifying orbit
            completionText = Orbit Verified
        }
    }

    BEHAVIOUR
    {
        name = KSCWaypoint
        type = WaypointGenerator

        WAYPOINT
        {
            name = Directly above KSC

            // The icon to use when displaying the waypoint.  At the moment
            // (0.90), this can only be icons under Squad/Contracts/Icons.
            // Perhaps that will change in a future release.
            icon = dish

            // KEO altitude
            altitude = @/keoAltitude

            // The coordinates.
            latitude = 0.0 // Zero latitude so it doesn't move
            longitude = KSCLocation().Longitude()
        }
    }

    BEHAVIOUR
    {
        name = KEO
        type = OrbitGenerator

        FIXED_ORBIT
        {
            ORBIT
            {
                SMA = @/keoAltitude + @/targetBody.Radius()
                ECC = 0
                INC = 0
                LPE = 270.097584818355
                LAN = 263.709641058871
                MNA = 1.56901658088753
                EPH = 122896.298156917
                REF = 1
            }
        }
    }

    REQUIREMENT
    {
        name = Coverage
        type = Any

        hideChildren = true
        title = There must be a planet without coverage

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/allBodies.ElementAt(0)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/allBodies.Count() > 0
            }
        }

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/allBodies.ElementAt(1)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/allBodies.Count() > 1
            }
        }

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/allBodies.ElementAt(2)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/allBodies.Count() > 2
            }
        }

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/allBodies.ElementAt(3)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/allBodies.Count() > 3
            }
        }

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/allBodies.ElementAt(4)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/allBodies.Count() > 4
            }
        }

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/allBodies.ElementAt(5)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/allBodies.Count() > 5
            }
        }

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/allBodies.ElementAt(6)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/allBodies.Count() > 6
            }
        }

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/allBodies.ElementAt(7)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/allBodies.Count() > 7
            }
        }

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/allBodies.ElementAt(8)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/allBodies.Count() > 8
            }
        }

        REQUIREMENT
        {
            type = All

            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage

                targetBody = @/allBodies.ElementAt(9)

                minCoverage = 0.0
                maxCoverage = 0.2
            }

            REQUIREMENT
            {
                type = Expression
                expression = @/allBodies.Count() > 9
            }
        }
    }

    REQUIREMENT
    {
        name = AnyGigaDish
        type = Any

        REQUIREMENT
        {
            name = PartUnlocked1
            type = PartUnlocked

            part = RTGigaDish1
        }

        REQUIREMENT
        {
            name = PartUnlocked2
            type = PartUnlocked

            part = RTGigaDish2
        }
    }

    REQUIREMENT
    {
        name = PartModuleTypeUnlocked
        type = PartModuleTypeUnlocked

        partModuleType = Antenna
        partModuleType = Generator
    }
}
