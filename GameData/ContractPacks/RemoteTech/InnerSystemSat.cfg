// Contract for setting up a satellite for the inner planets.
//   Author: nightingale

CONTRACT_TYPE:NEEDS[RemoteTech]
{
    name = RT_InnerSat

    sortKey = 02.00

    title = Communication satellite for inner planets
    description = We'd like to know what's out there, and the first step is setting up a satellite or two with one of the new larger dishes.
    synopsis = Launch a satellite with enough range for the inner planets and point it towards one of them.  Make sure it has connectivity back to mission control.
    completedMessage = The satellite is up and transmitting, and our shake-out testing is complete!

    group = RemoteTech

    // Level 1 prestige
    prestige = Trivial

    // The satellite is launch in Kerbin orbit - so it's a Kerbin contract
    targetBody = HomeWorld()
    // Always offered by CommSat Group
    agent = Communication Satellite Group
    // Can only do this contract once
    maxCompletions = 1
    // Contract rewards
    rewardReputation = 10.0
    rewardFunds = @advanceFunds * 3.0
    advanceFunds = 40000.0 + 5000.0 * @targetBodies.Count()
    DATA
    {
        type = double
        sma = @targetBody.SemiMajorAxis()
        targetSMA = @sma * 1.55
    }
    DATA
    {
        type = List<CelestialBody>
        //targetBodies = AllBodies().Where(cb => cb.SemiMajorAxis() < @targetSMA && cb.IsPlanet() && cb != HomeWorld())
		targetBodies = [ Moho, Eve, Duna, Dres, Jool ]
    }
    
    PARAMETER
    {
        name = InnerSatI
        type = VesselParameterGroup
        define = Large CommSat I
        disableOnStateChange = false
        PARAMETER
        {
            name = KSCConnectivity
            type = KSCConnectivity
        }
        PARAMETER
        {
            name = ReachState
            type = ReachState
            situation = ORBITING
        }
        PARAMETER
        {
            name = InnerTarget
            type = Any
            title = Point a dish at ONE of the inner planets
            disableOnStateChange = false
            PARAMETER
            {
                name = HasAntenna
                type = HasAntenna
                antennaType = Dish
                targetBody = @target
                ITERATOR
                {
                    type = CelestialBody
                    target = @/targetBodies
                }
            }
        }
    }    
    PARAMETER
    {
        name = Duration
        type = Duration
        duration = 4d
        preWaitText = Testing time after network up
        waitingText = Performing shake-out testing
        completionText = Shake-out testing completed
    }
    REQUIREMENT
    {
        name = Coverage
        type = Any
        hideChildren = true
        title = There must be an inner planet without coverage
        REQUIREMENT
        {
            name = CelestialBodyCoverage
            type = CelestialBodyCoverage
            targetBody = @/targetBodies.ElementAt(0)
            minCoverage = 0.0
            maxCoverage = 0.2
        }
        REQUIREMENT
        {
            type = All
            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage
                targetBody = @/targetBodies.ElementAt(1)
                minCoverage = 0.0
                maxCoverage = 0.2
            }
            REQUIREMENT
            {
                type = Expression
                expression = @/targetBodies.Count() > 1
            }
        }
        REQUIREMENT
        {
            type = All
            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage
                targetBody = @/targetBodies.ElementAt(2)
                minCoverage = 0.0
                maxCoverage = 0.2
            }
            REQUIREMENT
            {
                type = Expression
                expression = @/targetBodies.Count() > 2
            }
        }
        REQUIREMENT
        {
            type = All
            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage
                targetBody = @/targetBodies.ElementAt(3)
                minCoverage = 0.0
                maxCoverage = 0.2
            }
            REQUIREMENT
            {
                type = Expression
                expression = @/targetBodies.Count() > 3
            }
        }
        REQUIREMENT
        {
            type = All
            REQUIREMENT
            {
                name = CelestialBodyCoverage
                type = CelestialBodyCoverage
                targetBody = @/targetBodies.ElementAt(4)
                minCoverage = 0.0
                maxCoverage = 0.2
            }
            REQUIREMENT
            {
                type = Expression
                expression = @/targetBodies.Count() > 4
            }
        }
    }
    REQUIREMENT
    {
        name = CommDish
        type = Any
        REQUIREMENT
        {
            name = PartUnlocked
            type = PartUnlocked
            part = commDish
        }
        REQUIREMENT
        {
            name = PartUnlocked
            type = PartUnlocked
            part = RTLongDish2
        }
    }
    REQUIREMENT
    {
        name = PartModuleTypeUnlocked
        type = PartModuleTypeUnlocked
        partModuleType = Generator
    }
}