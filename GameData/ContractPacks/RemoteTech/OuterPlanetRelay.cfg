// Contract for setting up a network for an inner planet.
//   Author: nightingale

CONTRACT_TYPE:NEEDS[RemoteTech]
{
    name = RT_OuterPlanetRelay

    sortKey = "03." + @targetBody.Index().ToString("D2")

    title = Create a network for @targetBody
    description = @isDres ? @descDres : @isEeloo ? @descEeloo : @isNeptune ? @descNeptune : @isUranus ? @descUranus : @descDefault
    synopsis = Build a communication network that provides coverage of @targetBody with a link back to mission control.
    completedMessage = The network is up and transmitting, and our shake-out testing is complete!

    group = RemoteTech

    // Level 2 prestige
    prestige = Significant

    targetBody = @targetPlanet

    // Always offered by CommSat Group
    agent = Communication Satellite Group

    // Can only do this contract once
    maxCompletions = 1

    // Contract rewards
    rewardReputation = 1.0
    rewardFunds = @advanceFunds * 3.0
    advanceFunds = 70000.0
    
    DATA
    {
        type = double

        sma = HomeWorld().SemiMajorAxis()
        targetSMA = @sma * 1.55
    }

    DATA
    {
        type = string

        descDefault = We'd like to know more about @targetBody.  Set up a communication network for us.
        descDres = We're not sure if there's actually anything worth seeing on Dres.  Let's check it out anyway.  Set up a communication network for us.
        descEeloo = Is Eeloo reflective enough to bounce a signal off of?  Only one way to find out.  Set up a communication network for us.
        descNeptune = Neptune should would be an interesting place to visit.  Set up a communication network for us.
        descUranus = There's aren't many places colder than Uranus, we should check it out.  Set up a communication network for us.
    }

    DATA_EXPAND
    {
        type = CelestialBody

        //targetPlanet = AllBodies().Where(cb => cb.SemiMajorAxis() >= @targetSMA && cb.IsPlanet() && cb.Children().Count() < 3 && cb != HomeWorld())
		targetPlanet = [ Kel, Hal, Naith, Hypat ]
    }

    DATA
    {
        type = bool

        isDres = @targetPlanet.Name() == "Dres"
        isEeloo = @targetPlanet.Name() == "Eeloo"
        isNeptune = @targetPlanet.Name() == "Neptune"
        isUranus = @targetPlanet.Name() == "Uranus"
    }

    PARAMETER
    {
        name = CoverageParameter
        type = CelestialBodyCoverage

        targetBody = @/targetPlanet

        coverage = 0.95
    }

    PARAMETER
    {
        name = Duration
        type = Duration

        duration = 7d

        preWaitText = Testing time after network up
        waitingText = Performing shake-out testing
        completionText = Shake-out testing completed
    }

    REQUIREMENT
    {
        name = CelestialBodyCoverage
        type = CelestialBodyCoverage

        targetBody = HomeWorld()

        minCoverage = 0.7
        maxCoverage = 1.0
    }

    REQUIREMENT
    {
        name = AnyGigaDish
        type = Any

        REQUIREMENT
        {
            name = PartUnlocked1
            type = PartUnlocked

            part = RTGigaDish1
        }

        REQUIREMENT
        {
            name = PartUnlocked2
            type = PartUnlocked

            part = RTGigaDish2
        }
    }

    REQUIREMENT
    {
        name = PartModuleTypeUnlocked
        type = PartModuleTypeUnlocked

        partModuleType = Antenna
        partModuleType = Generator
    }

    REQUIREMENT
    {
        type = CelestialBodyCoverage

        maxCoverage = 0.7
    }
}
